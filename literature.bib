@article{halili2018web,
author = {Halili, Festim and Ramadani, Erenis},
file = {:home/marcel/Downloads/Web{\_}Services{\_}A{\_}Comparison{\_}of{\_}Soap{\_}and{\_}Re.pdf:pdf},
journal = {Modern Applied Science},
number = {3},
pages = {175},
title = {{Web services: a comparison of soap and rest services}},
volume = {12},
year = {2018}
}
@inproceedings{7275851,
abstract = {Web Services are common means to exchange data and information over the network. Web Services make themselves available over the internet, where technology and platform are independent. Once web services are built it is accessed via uniform resource locator (URL) and their functionalities can be utilized in the application domain. Web services are self-contained, modular, distributed and dynamic in nature. These web services are described and then published in Service Registry e.g., UDDI and then they are invoked over the Internet. Web Services are basic Building blocks of Services Oriented Architecture (SOA). These web services can be developed based on two interaction styles such as Simple Object Access Protocol (SOAP) and Representational State Transfer Protocol (REST). It is important to select appropriate interaction styles i.e., either SOAP or REST for building Web Sevices. Choosing service interaction style is an important architectural decision for designers and developers, as it influences the underlying requirements for implementing web service solutions. In this study, the performance of application of web services for Enterprise Application Integration (EAI) based on SOAP and REST is compared. Since web services operate over network throughput and response time are considered as a metrics parameter for evaluation.},
author = {Kumari, S and Rath, S K},
booktitle = {2015 International Conference on Advances in Computing, Communications and Informatics (ICACCI)},
doi = {10.1109/ICACCI.2015.7275851},
file = {:home/marcel/Downloads/07275851.pdf:pdf},
keywords = {Buildings,EAI,Internet,Measurement,REST,REST based Web services,SOA,SOAP,SOAP based Web services,Service-oriented architecture,Simple object access protocol,Throughput,Time factors,URL,Web Service,Web services,electronic commerce,enterprise application integration,network throughput,representational state transfer protocol,response time,service registry,service-oriented architecture,services oriented architecture,simple object access protocol,uniform resource locator},
month = {aug},
pages = {1656--1660},
title = {{Performance comparison of SOAP and REST based Web Services for Enterprise Application Integration}},
year = {2015}
}
@inproceedings{7993893,
abstract = {RESTful and SOAP-based services are the two main Web provisioning services nowadays. RESTful services are becoming widely popular with the passage of time and are replacing SOAP-based Web services in many fields due to ease of use, deployment and light weightiness. Hence, a vital question of interest arises regarding better performance between RESTful and SOAP-based services. In this paper, we present the control system architecture using RESTful and SOAP-based protocol an indoor actuator networks. And, we aim to compare both the services by designing an indoor actuator networks based on SOAP and REST architectural styles.},
author = {Malik, S and Kim, D},
booktitle = {2017 Ninth International Conference on Ubiquitous and Future Networks (ICUFN)},
doi = {10.1109/ICUFN.2017.7993893},
file = {:home/marcel/Downloads/07993893.pdf:pdf},
issn = {2165-8536},
keywords = {Actuators,Computer architecture,Internet of Things (IoT),Performance evaluation,Protocols,REST (Representational state transfer),REST architectural styles,RESTful services,SOAP (Simple Object Access Protocol),SOAP Web services,SOAP-based protocol,SOAP-based services,Simple object access protocol,Web provisioning services,Web services,actuators,control system architecture,indoor actuator networks,protocols},
pages = {753--755},
title = {{A comparison of RESTful vs. SOAP web services in actuator networks}},
year = {2017}
}
@inproceedings{8240185,
abstract = {There has been a high concern regarding the energy saving on mobile devices recently, for mobile devices have been performing increasingly complex tasks over time. The computation offloading is one of the most popular techniques used by developers as an effective way of saving energy on mobile devices, which consists on executing complex tasks in external servers with different purposes including save energy. Deciding towards offloading certain tasks requires to understand the influence of the amount of data, amount of computation, and the network profile. Several studies have investigated the influence of different wireless flavours, such as 3G, 4G and wifi, but no study has investigated the influence of the communication choices on the energy cost. Therefore, in this paper, we present an experiment we conducted to evaluate the energy consumption of different communication protocols and architectural styles, namely REST, SOAP, Socket and gRPC, when executing algorithms of different complexities and different input sizes and types. Results show that local execution is more economic with less complex algorithms and small input data. When it comes to remote execution, REST is the most economic choice followed by Socket. Moreover, our data show that computation offloading can save up to 10 time as much energy when compared to local execution for some executions configurations.},
author = {Chamas, C L and Cordeiro, D and Eler, M M},
booktitle = {2017 IEEE 9th Latin-American Conference on Communications (LATINCOM)},
doi = {10.1109/LATINCOM.2017.8240185},
file = {:home/marcel/Downloads/08240185.pdf:pdf},
keywords = {3G,3G mobile communication,4G,4G mobile communication,Batteries,Energy consumption,Mobile handsets,REST,SOAP,Servers,Socket,Sockets,Sorting,architectural styles,communication protocols,complex algorithms,computation offloading,energy conservation,energy consumption,energy cost analysis,energy saving,gRPC,local execution,mobile applications,mobile computing,mobile devices,network profile,protocols,telecommunication power management,wifi,wireless LAN,wireless flavours},
month = {nov},
pages = {1--6},
title = {{Comparing REST, SOAP, Socket and gRPC in computation offloading of mobile applications: An energy cost analysis}},
year = {2017}
}
@inproceedings{725034,
abstract = {The group management system is one of the important functions of GRPC for the distributed network management system. After a brief introduction to the theory of Petri nets, the group management system of the RPC (Remote Procedure Call) protocol is presented. Our proposed management system was analyzed by the Petri nets.},
author = {{Jong-Kun Lee}},
booktitle = {SMC'98 Conference Proceedings. 1998 IEEE International Conference on Systems, Man, and Cybernetics (Cat. No.98CH36218)},
doi = {10.1109/ICSMC.1998.725034},
file = {:home/marcel/Downloads/00725034.pdf:pdf},
issn = {1062-922X},
keywords = {Abstracts,Application software,Computer network management,Computer networks,Computer science,Distributed computing,Electronic mail,GRPC protocol,Information management,Petri nets,Protocols,Remote Procedure Call protocol,client server system,client-server systems,computer network management,distributed network management systems,group management system,protocols,remote procedure calls},
pages = {2507--2512 vol.3},
title = {{A group management system analysis of GRPC protocol for distributed network management systems}},
volume = {3},
year = {1998}
}
@inproceedings{5339611,
abstract = {Currently most Web services architectures adopt RPC as their architectural style. But because of the complexity of RPC, there are bottlenecks of RPC-style Web services in Web-scale applications. REST not only can make full use of Web features, but also has the advantage of simplicity. So REST becomes a new alternative to RPC for Web services architecture. In this paper, at first the brief introductions of RPC and REST are provided. Then two kinds of architectural styles are analyzed and compared from the perspectives of scalability, coupling, and security. In the end the development trend of Web services architecture is prospected.},
author = {{Xinyang Feng} and {Jianjing Shen} and {Ying Fan}},
booktitle = {2009 First International Conference on Future Information Networks},
doi = {10.1109/ICFIN.2009.5339611},
file = {:home/marcel/Downloads/05339611.pdf:pdf},
keywords = {Architectural Styles,Computer architecture,Contracts,Distributed computing,REST,RPC,Representational state transfer,Scalability,Security,Service oriented architecture,Simple object access protocol,TV,Web Services,Web services,Web services architecture,coupling,representational state transfer,scalability,security,telecommunication security},
pages = {7--10},
title = {{REST: An alternative to RPC for Web services architecture}},
year = {2009}
}
@inproceedings{5359694,
abstract = {A Web service is a software application that can be accessed remotely using XML-based languages. It represents a communication interface offered by the server, through that the clients (programs on other systems) may require different information. The customer may vary, may be present on the same computer server, may be in the same local network or it may be located in the opposite part of the country. It is a method by which applications can communicate with each other through asynchronous messages or calls on remote procedure (RPC remote procedure call). So it can be concluded that a Web service is a software application that can be accessed remotely using XML-based languages. Web services are just two programs that change data between them on the Internet or Intranet in XML format called SOAP (simple object access protocol).},
author = {Mironela, P},
booktitle = {2009 International Conference on Computer Technology and Development},
doi = {10.1109/ICCTD.2009.15},
file = {:home/marcel/Downloads/05359694.pdf:pdf},
keywords = {Access protocols,Application software,Communication standards,Computer languages,Internet,Intranet,REST,REST architecture,RPC,RPC architecture,SOAP,Service oriented architecture,Simple object access protocol,Web and internet services,Web server,Web services,XML,XML-based languages,communication interface,computer server,extended markup language,protocols,remote procedure call,simple object access protocol},
month = {nov},
pages = {377--379},
title = {{The Importance of Web Services Using the RPC and REST Architecture}},
volume = {1},
year = {2009}
}
@misc{GRPCAuthors2020,
abstract = {gRPC is a modern open source high performance RPC framework that can run in any environment. It can efficiently connect services in and across data centers with pluggable support for load balancing, tracing, health checking and authentication. It is also applicable in last mile of distributed computing to connect devices, mobile applications and browsers to backend services.},
author = {gRPC Authors},
title = {{gRPC}},
url = {https://grpc.io/},
urldate = {08.12.2020},
year = {2020}
}
@article{wagh2012comparative,
author = {Wagh, Kishor and Thool, Ravindra},
file = {:home/marcel/Downloads/AComparativeStudyofSOAPVsRESTWebServicesProvisioning.pdf:pdf},
journal = {Journal of Information Engineering and Applications},
number = {5},
pages = {12--16},
title = {{A comparative study of soap vs rest web services provisioning techniques for mobile host}},
volume = {2},
year = {2012}
}
@misc{Wiggins2017,
author = {Wiggins, Adam},
title = {{The Twelve-Factor App}},
url = {https://12factor.net/},
urldate = {2020-12-08},
year = {2017}
}
@techreport{karmel2016nist,
	author = {Karmel, Anil and Chandramouli, Ramaswamy and Iorga, Michaela},
	file = {:home/marcel/Downloads/sp800-180{\_}draft.pdf:pdf},
	institution = {National Institute of Standards and Technology},
	title = {{Nist definition of microservices, application containers and system virtual machines}},
	year = {2016}
}

@techreport{rfc7540,
	author = {Belshe, M and Peon, R and Thomson, M},
	title = { Hypertext Transfer Protocol Version 2 (HTTP/2)},
	howpublished = {Internet Requests for Comments},
	type = {RFC},
	number = 7540,
	year = {2015},
	month = {5},
	issn = {2070-1721},
	publisher = {Internet Engineering Task Force (IETF)},
	institution = {Internet Engineering Task Force (IETF)},
	url = {https://tools.ietf.org/html/rfc7540}
}

@misc{grpcrest,
	author = {gRPC Authors},
	title = {{gRPC with REST and Open APIs}},
	url = {https://grpc.io/blog/coreos/},
	urldate = {08.12.2020},
	year = {2020}
}

@misc{grpcmotiviation,
	author = {Ryan, L},
	title = {{gRPC Motivation and Design Principles}},
	url = {https://grpc.io/blog/principles/},
	urldate = {23.01.2021},
	year = {2015}
}

@misc{httpArchive,
	author = {Souders, S},
	title = {{Report: State of thew Web}},
	url = {https://httparchive.org/reports/state-of-the-web},
	urldate = {23.01.2021},
	year = {2010}
}

@techreport{rfc8740,
	author = {Benjamin, D},
	title = {Using TLS 1.3 with HTTP/2},
	howpublished = {Internet Requests for Comments},
	type = {RFC},
	number = 8740,
	year = {2020},
	month = {2},
	issn = {2070-1721},
	publisher = {Internet Engineering Task Force (IETF)},
	institution = {Internet Engineering Task Force (IETF)},
	url = {https://tools.ietf.org/html/rfc8740}
}

@misc{httpwgHTTP2,
	author = {IETF HTTP Working Group},
	title = {{HTTP/2 Frequently Asked Questions}},
	url = {https://http2.github.io/faq/},
	urldate = {23.01.2021},
	year = {2021}
}